//# proto-file:
//# proto-message:

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: pb_idl/grpc/grpc.proto

// 假设有如下proto文件

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GrpcSerivce_SayHello_FullMethodName = "/test.GrpcSerivce/SayHello"
)

// GrpcSerivceClient is the client API for GrpcSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcSerivceClient interface {
	SayHello(ctx context.Context, in *GrpcRequest, opts ...grpc.CallOption) (*GrpcResponse, error)
}

type grpcSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcSerivceClient(cc grpc.ClientConnInterface) GrpcSerivceClient {
	return &grpcSerivceClient{cc}
}

func (c *grpcSerivceClient) SayHello(ctx context.Context, in *GrpcRequest, opts ...grpc.CallOption) (*GrpcResponse, error) {
	out := new(GrpcResponse)
	err := c.cc.Invoke(ctx, GrpcSerivce_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcSerivceServer is the server API for GrpcSerivce service.
// All implementations must embed UnimplementedGrpcSerivceServer
// for forward compatibility
type GrpcSerivceServer interface {
	SayHello(context.Context, *GrpcRequest) (*GrpcResponse, error)
	mustEmbedUnimplementedGrpcSerivceServer()
}

// UnimplementedGrpcSerivceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcSerivceServer struct {
}

func (UnimplementedGrpcSerivceServer) SayHello(context.Context, *GrpcRequest) (*GrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGrpcSerivceServer) mustEmbedUnimplementedGrpcSerivceServer() {}

// UnsafeGrpcSerivceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcSerivceServer will
// result in compilation errors.
type UnsafeGrpcSerivceServer interface {
	mustEmbedUnimplementedGrpcSerivceServer()
}

func RegisterGrpcSerivceServer(s grpc.ServiceRegistrar, srv GrpcSerivceServer) {
	s.RegisterService(&GrpcSerivce_ServiceDesc, srv)
}

func _GrpcSerivce_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcSerivceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcSerivce_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcSerivceServer).SayHello(ctx, req.(*GrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcSerivce_ServiceDesc is the grpc.ServiceDesc for GrpcSerivce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcSerivce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.GrpcSerivce",
	HandlerType: (*GrpcSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _GrpcSerivce_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_idl/grpc/grpc.proto",
}
